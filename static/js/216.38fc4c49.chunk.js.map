{"version":3,"file":"static/js/216.38fc4c49.chunk.js","mappings":"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","sources":["components/MiddleBlock/styles.tsx","components/Convert/convert.js","components/Convert/upload.js","components/MiddleBlock/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const MiddleBlockSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 7.5rem 0 3rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    padding: 5.5rem 0 3rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  padding: 0.75rem 0 0.75rem;\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  max-width: 570px;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import * as d3 from \"d3\";\nimport { useState, useEffect } from \"react\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nconst Convert = (props) => {\n    \n    const [geoData, setGeoData] = useState([]);\n    const [percentage, setPercentage] = useState(0);\n\n    useEffect(() => {\n        let data = d3.csvParse(props.text);\n        let proxy = \"https://mighty-shelf-70474.herokuapp.com/\";\n        let url = \"https://geocoding.geo.census.gov/geocoder/locations/onelineaddress?\";\n        \n        console.time(\"do\");\n        const fetchData = () => {\n            let list = [];\n            for (let addr of data) {\n                addr[data.columns[0]] = addr[data.columns[0]].replace(/^[^\\d]*/, '');\n                addr[data.columns[0]] = addr[data.columns[0]].replace(/\\s\\s+/g, ' ');\n                let params = new URLSearchParams({\n                    address: addr[data.columns[0]],\n                    benchmark: \"Public_AR_Current\",\n                    format: \"json\",\n                })\n                \n                fetch(proxy + url + params, {\n                    headers:{\n                      \"accepts\":\"application/json\"\n                  }})\n                .then(response => response.json())\n                .then(json => {\n                    list.push(json);\n                    console.log(list.length)\n                    setPercentage((list.length / data.length * 100))\n                    if (list.length === data.length) {\n                        setGeoData([...list]);\n                        console.timeEnd(\"do\");\n                    }\n                })\n            }\n        }\n        \n        fetchData();\n        \n         \n    }, [props.text, setGeoData]);\n\n    const downloadFile = ({ data, fileName, fileType }) => {\n        const blob = new Blob([data], { type: fileType });\n      \n        const a = document.createElement(\"a\");\n        a.download = fileName;\n        a.href = window.URL.createObjectURL(blob);\n        const clickEvt = new MouseEvent(\"click\", {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n        });\n        a.dispatchEvent(clickEvt);\n        a.remove();\n    };\n\n    const exportToJson = () => {\n        const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n            JSON.stringify(geoData)\n        )}`;\n        const link = document.createElement(\"a\");\n        link.href = jsonString;\n        link.download = \"geo.json\";\n    \n        link.click();\n\n    }\n\n    const exportToCsv = (e) => {\n        e.preventDefault();\n        let headers = [\"Address, Longitude, Latitude\"];\n        let contents = [];\n        geoData.forEach(d => {\n            let address = d.result.input.address.address;\n            let x = d.result.addressMatches[0].coordinates.x;\n            let y = d.result.addressMatches[0].coordinates.y;\n            contents.push(address + \",\" + x + \",\" + y);\n        });\n\n        downloadFile({\n            data: [...headers, ...contents].join(\"\\n\"),\n            fileName: \"geo.csv\",\n            fileType: \"text/csv\",\n        });\n    }\n\n    function LinearProgressWithLabel(props) {\n        return (\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ width: '100%', mr: 1 }}>\n              <LinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box sx={{ minWidth: 35 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\n                props.value,\n              )}%`}</Typography>\n            </Box>\n          </Box>\n        );\n      }\n      \n\n    return (\n        <div>\n            <div className=\"progressBar\">\n                <LinearProgressWithLabel\n                    value={percentage} \n                />\n            </div>\n            \n            {geoData.length ? \n                <div className=\"actionBtns\">\n                    <button type=\"button\" onClick={exportToJson}>\n                        Export to JSON\n                    </button>\n                    <button type=\"button\" onClick={exportToCsv}>\n                        Export to CSV\n                    </button>\n                </div>\n            : null}   \n        </div>\n    )\n\n\n}\n\nexport default Convert;\n\n","import Convert from \"./convert\";\nimport { useState } from \"react\";\nimport \"./convert.css\";\n\n\nconst Upload = () => {\n  const [file, setFile] = useState();\n  const [text, setText] = useState();\n\n  const fileReader = new FileReader();\n\n  const handleOnChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleOnSubmit = (e) => {\n    console.log(\"sub\")\n    e.preventDefault();\n    if (file) {\n\t\t  fileReader.onload = (event) => setText(event.target.result);\n\t\t  fileReader.readAsText(file);  \n    }\n    \n  };\n\n  return (\n    <aside className=\"aside-open\">\n        <form action=\"\">\n            <div className=\"upload-btn\">\n                <input id=\"img_upload\" name=\"img_upload\" type=\"file\" accept=\".csv\" onChange={handleOnChange} />\n                <button htmlFor=\"img_upload\" type=\"button\" tabIndex=\"-1\" title=\"Upload\">\n                    <svg viewBox=\"0 0 512 512\" width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"m182.461 155.48 49.539-49.539v262.059a24 24 0 0 0 48 0v-262.059l49.539 49.539a24 24 0 1 0 33.941-33.941l-90.509-90.51a24 24 0 0 0 -33.942 0l-90.509 90.51a24 24 0 1 0 33.941 33.941z\"/>\n                    <path d=\"m464 232a24 24 0 0 0 -24 24v184h-368v-184a24 24 0 0 0 -48 0v192a40 40 0 0 0 40 40h384a40 40 0 0 0 40-40v-192a24 24 0 0 0 -24-24z\"/>\n                    </svg>\n                </button>\n                <input id=\"img_name\" name=\"img_name\" type=\"text\" placeholder={file ? file.name : \"No File Selected\"} disabled />\n            </div>\n            <div className=\"convert-btn\">\n              <button \n                id=\"reset-btn\" \n                type=\"button\" \n                onClick={e => handleOnSubmit(e)}\n              >\n                Convert\n              </button>\n            </div>\n            {text ? <Convert text={text} /> : null}\n        </form>\n        \n    </aside>\n  );\n\n}\n\nexport default Upload;\n\n/*\n\n<div style={{ textAlign: \"center\" }}>\n      <form>\n        <input\n          type={\"file\"}\n          id={\"csvFileInput\"}\n          accept={\".csv\"}\n          onChange={handleOnChange}\n        />\n\n        <button\n          onClick={(e) => {\n            handleOnSubmit(e);\n          }}\n        >\n          UPLOAD CSV\n        </button>\n      </form>\n\n      <br />\n\t  {text ? <Convert text={text} /> : null}\n    </div>\n\n\n*/","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { MiddleBlockSection, Content, ContentWrapper } from \"./styles\";\r\nimport Upload from \"../../components/Convert/upload\";\r\n\r\ninterface MiddleBlockProps {\r\n  title: string;\r\n  content: string;\r\n  button: string;\r\n  t: any;\r\n  id: any;\r\n}\r\n\r\nconst MiddleBlock = ({ title, content, button, t, id }: MiddleBlockProps) => {\r\n  \r\n  return (\r\n    <MiddleBlockSection>\r\n      <Slide direction=\"up\">\r\n        <Row justify=\"center\" align=\"middle\" id={id} >\r\n          <ContentWrapper>\r\n            <Col lg={24} md={24} sm={24} xs={24}>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              <Upload />\r\n            </Col>\r\n          </ContentWrapper>\r\n        </Row>\r\n      </Slide>\r\n    </MiddleBlockSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(MiddleBlock);\r\n"],"names":["MiddleBlockSection","styled","Content","ContentWrapper","props","useState","geoData","setGeoData","percentage","setPercentage","useEffect","data","d3","text","console","time","list","addr","columns","replace","params","URLSearchParams","address","benchmark","format","fetch","proxy","headers","then","response","json","push","log","length","timeEnd","fetchData","LinearProgressWithLabel","Box","sx","display","alignItems","width","mr","LinearProgress","variant","minWidth","Typography","color","Math","round","value","className","type","onClick","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","href","download","click","e","preventDefault","contents","forEach","d","result","input","x","addressMatches","coordinates","y","fileName","fileType","blob","Blob","a","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadFile","join","file","setFile","setText","fileReader","FileReader","action","id","name","accept","onChange","target","files","htmlFor","tabIndex","title","viewBox","height","xmlns","placeholder","disabled","onload","event","readAsText","handleOnSubmit","withTranslation","content","t","button","direction","justify","align","lg","md","sm","xs"],"sourceRoot":""}